name: Process Inventory and Monitor Changes

on:
  schedule:
    - cron: '*/5 * * * *'  # Runs every 5 minutes
  workflow_dispatch:  # Allows manual triggering

jobs:
  process-and-monitor:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Cache state files with retry
      uses: Wandalen/wretry.action@v4
      with:
        attempt_limit: 3
        attempt_delay: 5000  # 5 seconds between attempts
        action: actions/cache@v4
        with: |
          path: |
            previous_stock_state.pickle
            previous_parts_state.pickle
            previous_whole_chicken_diff_state.pickle
            previous_gizzard_diff_state.pickle
            failed_webhooks.json
            cache_miss_alert.json
          key: inventory-state-v4-${{ github.run_number }}
          restore-keys: |
            inventory-state-v4-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create service account credentials file
      run: |
        echo '${{ secrets.GOOGLE_SHEETS_CREDENTIALS }}' > service-account.json
      env:
        ACTIONS_STEP_DEBUG: false
    
    - name: Run data transformation
      id: transformation
      env:
        INVENTORY_SHEET_ID: ${{ secrets.INVENTORY_SHEET_ID }}
        INVENTORY_ETL_SPREADSHEET_ID: ${{ secrets.INVENTORY_ETL_SPREADSHEET_ID }}
        ACTIONS_STEP_DEBUG: false
      run: |
        echo "Starting data transformation..."
        if python transformation.py; then
          echo "Data transformation completed successfully"
          echo "TRANSFORMATION_SUCCESS=true" >> $GITHUB_ENV
        else
          echo "‚ùå Data transformation failed"
          echo "TRANSFORMATION_SUCCESS=false" >> $GITHUB_ENV
          exit 1
        fi

    - name: Wait for data propagation
      if: env.TRANSFORMATION_SUCCESS == 'true'
      run: |
        echo "Waiting 30 seconds for Google Sheets data propagation..."
        sleep 30
        echo "Proceeding with monitoring"

    - name: Run monitoring script
      if: env.TRANSFORMATION_SUCCESS == 'true'
      env:
        SPACE_WEBHOOK_URL: ${{ secrets.SPACE_WEBHOOK_URL }}
        SPECIFICATION_SHEET_ID: ${{ secrets.SPECIFICATION_SHEET_ID }}
        INVENTORY_ETL_SPREADSHEET_ID: ${{ secrets.INVENTORY_ETL_SPREADSHEET_ID }}
        ACTIONS_STEP_DEBUG: false
      run: |
        echo "Starting inventory monitoring..."
        python monitor_combined.py
        echo "Monitoring completed"


    - name: Check for failed webhooks and cache miss alerts
      if: always()
      run: |
        # Initialize alert flags
        echo "FAILED_WEBHOOK_ALERT=false" >> $GITHUB_ENV
        echo "CACHE_MISS_ALERT=false" >> $GITHUB_ENV

        # Check for failed webhooks
        if [ -f "failed_webhooks.json" ] && [ -s "failed_webhooks.json" ]; then
          echo "Failed webhooks detected. Preparing email alert..."
          FAILED_COUNT=$(wc -l < failed_webhooks.json)
          echo "FAILED_WEBHOOK_COUNT=$FAILED_COUNT" >> $GITHUB_ENV
          echo "FAILED_WEBHOOK_ALERT=true" >> $GITHUB_ENV
          echo "üìß Email alert will be sent for $FAILED_COUNT failed webhook(s)"

          # Create detailed email body with failed webhook details
          echo "Failed webhook notifications detected in Kaduna inventory monitoring system." > email_body.txt
          echo "" >> email_body.txt
          echo "Number of failed webhooks: $FAILED_COUNT" >> email_body.txt
          echo "Run ID: ${{ github.run_number }}" >> email_body.txt
          echo "Time: $(date -u)" >> email_body.txt
          echo "" >> email_body.txt
          echo "Failed webhook details:" >> email_body.txt
          echo "========================" >> email_body.txt
          cat failed_webhooks.json >> email_body.txt
          echo "" >> email_body.txt
          echo "Please check the failed webhooks artifact for details:" >> email_body.txt
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> email_body.txt
          echo "" >> email_body.txt
          echo "This means inventory change notifications may not have been delivered to your Google Space." >> email_body.txt
        else
          echo "No failed webhooks found"
        fi

        # Check for cache miss alerts
        if [ -f "cache_miss_alert.json" ] && [ -s "cache_miss_alert.json" ]; then
          echo "Cache miss detected. Preparing email alert..."
          echo "CACHE_MISS_ALERT=true" >> $GITHUB_ENV
          echo "üìß Email alert will be sent for cache miss"

          # Create cache miss email body
          echo "Cache miss detected in Kaduna inventory monitoring system." > cache_miss_email_body.txt
          echo "" >> cache_miss_email_body.txt
          echo "Run ID: ${{ github.run_number }}" >> cache_miss_email_body.txt
          echo "Time: $(date -u)" >> cache_miss_email_body.txt
          echo "" >> cache_miss_email_body.txt
          echo "Issue: The monitoring system could not retrieve previous state files from GitHub Actions cache." >> cache_miss_email_body.txt
          echo "Impact: No inventory change detection could be performed for this monitoring cycle." >> cache_miss_email_body.txt
          echo "" >> cache_miss_email_body.txt
          echo "Details:" >> cache_miss_email_body.txt
          echo "========" >> cache_miss_email_body.txt
          cat cache_miss_alert.json >> cache_miss_email_body.txt
          echo "" >> cache_miss_email_body.txt
          echo "Action Required:" >> cache_miss_email_body.txt
          echo "- Check GitHub Actions cache status" >> cache_miss_email_body.txt
          echo "- Verify the retry mechanism is working" >> cache_miss_email_body.txt
          echo "- Monitor subsequent runs to ensure cache is restored" >> cache_miss_email_body.txt
          echo "" >> cache_miss_email_body.txt
          echo "Workflow Details:" >> cache_miss_email_body.txt
          echo "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" >> cache_miss_email_body.txt
        else
          echo "No cache miss detected"
        fi

    - name: Send email alert for failed webhooks
      if: always() && env.FAILED_WEBHOOK_ALERT == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "üö® Kaduna Inventory: Failed Webhook Alert (${{ env.FAILED_WEBHOOK_COUNT }} failures)"
        to: ${{ secrets.EMAIL_RECIPIENTS }}
        from: ${{ secrets.EMAIL_SENDER }}
        body: file://email_body.txt

    - name: Send email alert for cache miss
      if: always() && env.CACHE_MISS_ALERT == 'true'
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "‚ö†Ô∏è Kaduna Inventory: Cache Miss Alert - Monitoring Disabled"
        to: ${{ secrets.EMAIL_RECIPIENTS }}
        from: ${{ secrets.EMAIL_SENDER }}
        body: file://cache_miss_email_body.txt

    - name: Upload failed webhooks as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: failed-webhooks-${{ github.run_number }}
        path: failed_webhooks.json
        if-no-files-found: ignore
        retention-days: 30

    - name: Upload cache miss alert as artifact
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cache-miss-alert-${{ github.run_number }}
        path: cache_miss_alert.json
        if-no-files-found: ignore
        retention-days: 30 